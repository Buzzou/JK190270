#include "1050301bubbleSort.h"
#include <iostream> // 包含标准输入输出库，用于输入输出数据。
using namespace std; // 允许直接使用标准库中的元素，如cin和cout，避免每次都要写std::cin、std::cout

void bubbleSort()
// TODO: 可以引入一个布尔变量，当某一轮没有发生交换时，提前结束排序，提升效率。
{
    int n; // 用来对一个大小不超过1000的数组进行排序。a用来保存这些数，没有动态分配不必要的内存空间
    cin >> n; // 从标准输入读取数组大小n
    int a[n];
    // 这个循环用于输入数组的n个元素，将它们存储在数组a中
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }
    // 这两层循环实现了冒泡排序的核心逻辑
    // 外层循环控制需要进行的总轮数
    // 内层循环负责不断比较相邻的两个数，如果顺序错了（即前一个大于后一个），那么就交换
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 1; j < n - i; j++) // 通过n - i控制每一轮比较的范围，避免了不必要的比较
        // 随着轮数的增加，数组后面已经排好序的部分不再需要参与比较，因此内层循环的范围逐步缩小
        {
            if (a[j - 1] > a[j]) // 在每次内层循环中，判断相邻的两个元素，如果前一个元素比后一个大，意味着它们的顺序不对
            {
                // 通过一个临时变量temp进行交换，将较大的元素移动到后面
                // swap(a[j], a[j + 1]);
                int temp = a[j];
                a[j] = a[j - 1];
                a[j - 1] = temp;
            }
        } // 经过每一轮的比较，较大的元素会逐步冒泡到数组的末尾
    }
    // 这个循环用于依次输出排序后的数组，每个元素占一行
    for (int i = 0; i < n; i++)
    {
        cout << a[i] << endl;
    }
}
